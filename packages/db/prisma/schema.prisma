// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Source-of-Truth Models as specified in requirements
model SEOEntry {
  id          String   @id @default(cuid())
  url         String   @unique
  title       String?
  description String?
  keywords    String[]
  status      String   @default("ACTIVE")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("seo_entries")
}

model MediaAsset {
  id          String      @id @default(cuid())
  filename    String
  url         String
  mimeType    String
  size        Int
  alt         String?
  caption     String?
  status      String      @default("ACTIVE")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  PostMedia   PostMedia[]

  @@map("media_assets")
}

model PostMedia {
  id           String     @id @default(cuid())
  postId       String
  mediaAssetId String
  order        Int        @default(0)
  createdAt    DateTime   @default(now())
  post         Post       @relation(fields: [postId], references: [id], onDelete: Cascade)
  mediaAsset   MediaAsset @relation(fields: [mediaAssetId], references: [id], onDelete: Cascade)

  @@unique([postId, mediaAssetId])
  @@map("post_media")
}

model AIArtifact {
  id          String   @id @default(cuid())
  type        String   // "outline_options", "outline_final", "facts", "content", etc.
  content     Json
  metadata    Json?
  status      String   @default("PENDING") // PENDING, APPROVED, REJECTED
  approvedBy  String?
  approvedAt  DateTime?
  rejectedAt  DateTime?
  postId      String?  // Link to associated post
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("ai_artifacts")
}

// Phase 6 Full: Locale for i18n support
enum Locale {
  en
  ar
}

// Phase 6 Full: User & Role (expanded for RBAC)
enum Role {
  USER
  AUTHOR    // Can create and edit own posts, submit for review
  REVIEWER  // Can approve/reject posts
  EDITOR    // Can edit any post and publish
  OWNER     // Full access (site owner)
  ADMIN     // Full access (admin)
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts     Post[]   @relation("UserPosts")
  audits    Audit[]  @relation("UserAudits")

  @@map("users")
}

// Phase 6 Full: Post (multilingual with translations)
enum PostStatus {
  DRAFT
  PUBLISHED
}

model Post {
  id          String      @id @default(cuid())
  // NOTE: title, slug, excerpt, content moved to PostTranslation
  // Keeping these fields temporarily for backwards compatibility during migration
  title       String      // TODO: Remove after backfill
  slug        String      @unique // TODO: Remove after backfill
  excerpt     String?     // TODO: Remove after backfill
  content     String      // TODO: Remove after backfill
  
  status      PostStatus  @default(DRAFT)
  publishedAt DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  authorId    String
  author      User        @relation("UserPosts", fields: [authorId], references: [id])

  translations PostTranslation[] // Phase 6 Full: i18n support
  PostMedia    PostMedia[]

  @@map("posts")
}

// Phase 6 Full: Post translations for multilingual content
model PostTranslation {
  id        String   @id @default(cuid())
  postId    String
  locale    Locale
  title     String
  slug      String
  excerpt   String?
  content   String   // markdown or serialized JSON
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  // Ensure each post has only one translation per locale
  @@unique([postId, locale])
  // Ensure slugs are unique per locale
  @@unique([locale, slug])
  @@map("post_translations")
}

// Phase 6 Lite: Audit trail
model Audit {
  id        String   @id @default(cuid())
  entity    String   // "Post", "User", etc.
  entityId  String
  action    String   // "CREATE", "UPDATE", "PUBLISH", "DELETE"
  payload   Json?
  actorId   String?
  actor     User?    @relation("UserAudits", fields: [actorId], references: [id])
  createdAt DateTime @default(now())

  @@map("audits")
}

model Lead {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  source    String?
  status    String   @default("NEW") // NEW, CONTACTED, QUALIFIED, CONVERTED
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("leads")
}

model JobRun {
  id          String   @id @default(cuid())
  type        String   // "content_generation", "seo_analysis", etc.
  status      String   @default("PENDING") // PENDING, RUNNING, COMPLETED, FAILED
  input       Json?
  output      Json?
  error       String?
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("job_runs")
}

// Phase 8 Full: Social Media Embeds
model SocialEmbed {
  id        String   @id @default(cuid())
  key       String   @unique            // e.g. "LINKEDIN_WALL"
  html      String                      // sanitized embed HTML
  enabled   Boolean  @default(true)
  updatedBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("social_embeds")
}

// CMS: Hero Rotating Titles
model HeroTitle {
  id        String   @id @default(cuid())
  titleEn   String   // English title
  titleAr   String   // Arabic title
  order     Int      @default(0)
  enabled   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("hero_titles")
}

// CMS: Professional Experience
model Experience {
  id          String              @id @default(cuid())
  company     String
  role        String
  startDate   String              // e.g., "2019"
  endDate     String?             // e.g., "2023" or null for "Present"
  description String              // Rich text/HTML
  order       Int                 @default(0)
  enabled     Boolean             @default(true)
  logoUrl     String?             // Company logo
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  images      ExperienceImage[]

  @@map("experiences")
}

// CMS: Experience Images (landmarks, offices, etc.)
model ExperienceImage {
  id           String     @id @default(cuid())
  experienceId String
  url          String     // Image URL
  caption      String?    // Optional caption
  order        Int        @default(0)
  createdAt    DateTime   @default(now())
  experience   Experience @relation(fields: [experienceId], references: [id], onDelete: Cascade)

  @@map("experience_images")
}

// CMS: Hero Media (Video or Image)
model HeroMedia {
  id          String   @id @default(cuid())
  type        String   // "IMAGE" or "VIDEO"
  imageUrl    String?  // Hero image URL
  videoUrl    String?  // YouTube/Vimeo URL or self-hosted
  videoType   String?  // "youtube", "vimeo", "selfhosted"
  enabled     Boolean  @default(true)
  autoplay    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("hero_media")
}